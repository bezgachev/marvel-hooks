{"version":3,"file":"static/js/824.c540d8ed.chunk.js","mappings":"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","sources":["components/appBanner/AppBanner.js","components/errorBoundary/ErrorBoundary.js","components/errorMessage/ErrorMessage.js","components/comicsList/ComicsList.js","components/pages/ComicsPage.js","hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n\r\n}\r\n\r\nexport default ErrorBoundary;","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img src={img} style={{\r\n            display: 'block',\r\n            width: '250px',\r\n            height: '250px',\r\n            objectFit: 'contain',\r\n            margin: '0 auto'\r\n        }} alt=\"Error\"/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './comicsList.scss';\r\n\r\nconst setContent = (process, Component, newItemLoading) => {\r\n    switch (process) {\r\n        case 'waiting':\r\n            return <Spinner/>;\r\n        case 'loading':\r\n            return newItemLoading ? <Component/> : <Spinner/>;\r\n        case 'confirmed':\r\n            return <Component/>;\r\n        case 'error':\r\n            return <ErrorMessage/>;\r\n        default:\r\n            throw new Error('Unexpected process state');\r\n    }\r\n}\r\n\r\nconst ComicsList = () => {\r\n\r\n    const [comicsList, setComicsList] = useState([]);\r\n    const [newItemLoading, setNewItemLoading] = useState(false);\r\n    const [offset, setOffset] = useState(0);\r\n    const [comicsEnded, setComicsEnded] = useState(false);\r\n\r\n    const {getAllComics, process, setProcess} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        onRequest(offset, true);\r\n    // eslint-disable-next-line\r\n    }, [])\r\n\r\n    const onRequest = (offset, initial) => {\r\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\r\n        getAllComics(offset)\r\n            .then(onComicsListLoaded)\r\n            .then(() => setProcess('confirmed'));\r\n    }\r\n\r\n    const onComicsListLoaded = (newComicsList) => {\r\n        let ended = false;\r\n        if (newComicsList.length < 8) {\r\n            ended = true;\r\n        }\r\n\r\n        setComicsList(comicsList => [...comicsList, ...newComicsList]);\r\n        setNewItemLoading(false);\r\n        setOffset(offset => offset + 8);\r\n        setComicsEnded(ended);\r\n    }\r\n\r\n    function renderItems(arr) {\r\n        const items = arr.map((item, i) => {\r\n            return (\r\n                <li className=\"comics__item\" key={i}>\r\n                    <Link to={`/comics/${item.id}`}>\r\n                        <img className=\"comics__item-img\"\r\n                             src={item.thumbnail}\r\n                             alt={item.title}/>\r\n                        <div className=\"comics__item-name\">{item.title}</div>\r\n                        <div className=\"comics__item-price\">{item.price}</div>\r\n                    </Link>\r\n                </li>\r\n            )\r\n        });\r\n\r\n        return (\r\n            <ul className=\"comics__grid\">\r\n                {items}\r\n            </ul>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"comics__list\">\r\n            {setContent(process, () => renderItems(comicsList), newItemLoading)}\r\n            <button\r\n                className=\"button button__main button__long\"\r\n                disabled={newItemLoading}\r\n                style={{'display': comicsEnded || process === 'error' ? 'none' : 'block'}}\r\n                onClick={() => onRequest(offset)}\r\n                >\r\n                <div className=\"inner\">load more</div>\r\n            </button>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default ComicsList;","import {Helmet, HelmetProvider} from \"react-helmet-async\";\r\n\r\nimport AppBanner from '../appBanner/AppBanner';\r\nimport ComicsList from '../comicsList/ComicsList';\r\nimport ErrorBoundary from '../errorBoundary/ErrorBoundary';\r\n\r\nconst ComicsPage = () => {\r\n    return (\r\n        <>\r\n            <HelmetProvider>\r\n                <Helmet>\r\n                    <meta\r\n                        name=\"description\"\r\n                        content=\"Page with list of our comics\"\r\n                    />\r\n                    <title>Comics page</title>\r\n                </Helmet>\r\n            </HelmetProvider>\r\n\r\n            <AppBanner/>\r\n\r\n            <ErrorBoundary>\r\n                <ComicsList/>\r\n            </ErrorBoundary>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ComicsPage;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [process, setProcess] = useState('waiting');\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n        \r\n        setProcess('loading');\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n            return data;\r\n\r\n        } catch (e) {\r\n            setProcess('error');\r\n            throw e;\r\n        }\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => {\r\n        setProcess('loading');\r\n    }, []);\r\n\r\n    return {request, clearError, process, setProcess}\r\n}","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n    const {request, clearError, process, setProcess} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=b1e9d4f1bbf737cdb9636eb459035b42';\r\n    const _baseOffset = 210;\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n\t\tconst res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n\t\treturn res.data.results.map(_transformCharacter);\r\n\t}\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n\t}\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 210)}` : 'There is no description for this character',\r\n            thumbnail: `${char.thumbnail.path}.${char.thumbnail.extension}`,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items.slice(10)\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comic) => {\r\n\t\treturn {\r\n\t\t\tid: comic.id,\r\n\t\t\ttitle: comic.title,\r\n\t\t\tdescription: comic.description || \"There is no description\",\r\n\t\t\tpageCount: comic.pageCount\r\n\t\t\t\t? `${comic.pageCount} pages`\r\n\t\t\t\t: \"No information about the number of pages\",\r\n\t\t\tthumbnail: comic.thumbnail.path + \".\" + comic.thumbnail.extension,\r\n\t\t\tlanguage: comic.textObjects[0]?.language || \"en-us\",\r\n\t\t\tprice: comic.prices[0].price\r\n\t\t\t\t? `${comic.prices[0].price}$`\r\n\t\t\t\t: \"not available\",\r\n\t\t}\r\n    }\r\n\r\n    return {\r\n        clearError,\r\n        process,\r\n        setProcess,\r\n        getAllCharacters,\r\n        getCharacter,\r\n        getCharacterByName,\r\n        getComic,\r\n        getAllComics\r\n    }\r\n\r\n}\r\n\r\nexport default useMarvelService;"],"names":["AppBanner","_jsxs","className","children","_jsx","src","avengers","alt","avengersLogo","ErrorBoundary","Component","constructor","arguments","state","error","componentDidCatch","errorInfo","this","setState","render","ErrorMessage","props","img","style","display","width","height","objectFit","margin","setContent","process","newItemLoading","Spinner","Error","ComicsList","comicsList","setComicsList","useState","setNewItemLoading","offset","setOffset","comicsEnded","setComicsEnded","getAllComics","setProcess","useMarvelService","useEffect","onRequest","initial","then","onComicsListLoaded","newComicsList","ended","length","arr","items","map","item","i","Link","to","concat","id","thumbnail","title","price","renderItems","disabled","onClick","ComicsPage","_Fragment","HelmetProvider","Helmet","name","content","request","clearError","useHttp","useCallback","async","url","method","undefined","body","headers","response","fetch","ok","status","json","e","_apiBase","_apiKey","_transformCharacter","char","description","slice","path","extension","homepage","urls","wiki","comics","_transformComics","comic","_comic$textObjects$","pageCount","language","textObjects","prices","getAllCharacters","data","results","getCharacter","res","getCharacterByName","getComic"],"sourceRoot":""}